PART
{
// Kerbal Space Program - Part Config
//
//

// --- general parameters ---
name = BDAXBandRadar
module = Part
author = Kev1n8088

// --- asset parameters ---
buoyancy = 0
MODEL
	{
		model = BDArmoryCustom/Parts/XBandRadar/BDAXBandRadar
		scale = 2.0, 2.0, 2.0
	}
	rescaleFactor = 1



// --- node definitions ---
node_attach = 0.0, -0.0, 0, 0, 0, -1


// --- editor parameters ---
TechRequired = precisionEngineering
entryCost = 2200
cost = 1000
category = none
bdacategory = Radars
subcategory = 0
bulkheadProfiles = srf

title = #loc_BDArmory_part_BDAXBandRadar_title //BDA MK1 Sonar Pod
manufacturer = #loc_Custom_agent_title_1 //Bahamuto Dynamics //manufactured by SM Armory
description = #loc_BDArmory_part_BDAXBandRadar_description //BDA MK1 Sonar Pod can only detect splashed and submerged vessels mount below waterline for best results. As a hull-mounted sonar it has limited range and sensitivity only.
tags = #loc_BDArmory_part_BDAXBandRadar_tags 
// attachment rules: stack, srfAttach, allowStack, allowSrfAttach, allowCollision
attachRules = 0,1,0,0,1

// --- standard part parameters ---
mass = 0.001
dragModelType = default
maximum_drag = 0.2
minimum_drag = 0.2
angularDrag = 2
crashTolerance = 7
maxTemp = 3600

MODULE
{
  	name = ModuleRadar

	// -- Section: General Configuration --
	radarName = AN/EPY-39 X-Band AESA		// if left empty part.title is used, but advised to set this to a nice printable text
	rwrThreatType = 5				// IMPORTANT, please set correctly:
							// 0 = SAM site radar
							// 1 = Fighter radar (airborne)
							// 2 = AWACS radar (airborne)
							// 3, 4 = ACTIVE MISSILE (DO NOT USE UNLESS YOU KNOW WHAT YOU'RE DOING!
							// 5 = Detection radar (ground/ship based)
							// 6 = SONAR (ship/submarine based)
	rotationTransformName = shaft//rotationTransform
	//turretID = 0					// if needed
	resourceDrain = 10.0				// change to higher values for more capable radars, e.g AESA

	// -- Section: Capabilities --
	omnidirectional = true				// false: boresight scan radar
	directionalFieldOfView = 360			// for omni and boresight
	//boresightFOV = 10				// for boresight only
	scanRotationSpeed = 720				// degress per second
	lockRotationSpeed = 720				// only relevant if canLock
	lockRotationAngle = 4
	showDirectionWhileScan = false			// can show target direction on radar screen. False: radar echos displayed as block only (no direction)
	multiLockFOV = 360				// only relevant if canLock
	lockAttemptFOV = 2				// only relevant if canLock
    	maxLocks = 10					//how many targets can be locked/tracked simultaneously. only relevant if canLock

	canScan = true					// scanning/detecting targets (volume search)
	canLock = true					// locking/tracking targets (fire control)
  	canTrackWhileScan = true			// continue scanning while tracking a locked target
  	canReceiveRadarData = true			// can work as passive data receiver

	radarGroundClutterFactor = 1.0			// how much is the radar efficiency reduced to by ground clutter/look-down?
							// 0.0 = reduced to 0% (=IMPOSSIBLE to detect ground targets)
							// 1.0 = fully efficient (no difference between air & ground targets)
							// default if unset: 0.25
							// Ground targets, especially ships, already have a massively larger RCS than fighters, hence
							// any ground clutter factor >0.25 is to be considered very good, making an efficient surface/horizon search radar.
							// values >1.0 are possible, meaning the radar is MORE efficient during look down than vs air targets.
	sonarType = 0 //0 = Radar; 2 = passive sonar

	radarDetectionCurve
	{
	  // floatcurve to define at what range (km) which minimum cross section (m^2) can be detected.
	  // this defines both min/max range of the radar, and sensitivity/efficiency
	  // it is recommended to define an "assured detection range", at which all craft are detected regardless
	  //     of their rcs. This is achieved by using a minrcs value of zero, thus detecting everything.
	  //    key = distance	rcs
            key = 0.0	0
            key = 15	0	
            key = 25	1
            key = 50	1.5	
            key = 100	2
	}

	radarLockTrackCurve
	{
		// same as detectionCurve, just for locking/tracking purpose
                // ATTENTION: DO NOT USE an "assured locking range" here, as this would render lock-breaking
                //   ECM-jammers & chaff completely ineffective!!
            key = 0.0	0
            key = 15	1.5	//needs higher rcs to lock at comparable range
            key = 25	3
            key = 50	5
            key = 100	10 // at max range only very large ("noisy") targets can be tracked
	}


}
}
